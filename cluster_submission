#!/usr/bin/python2

from __future__ import print_function, division, generators

import argparse
try:
    import argcomplete
except ImportError:
    USING_ARGCOMPLETE = False
else:
    USING_ARGCOMPLETE = True
import math
import subprocess as sp
import os


submission_types = ["dg-sigma", "dg-et-sigma", "bifurcation-beta"]


parser = argparse.ArgumentParser(description="submit things to the cluster")
parser.add_argument("submission_type", metavar="submission-type", choices = submission_types)
parser.add_argument("-l", "--local", action="store_true")
parser.add_argument("-f", "--force", action="store_true")

if USING_ARGCOMPLETE:
    argcomplete.autocomplete(parser)

args = parser.parse_args()


# general stuff
if not args.local:
    os.system("module load anaconda/2.3.0")
    os.system("source activate TimClusterPython3")
submission_prefix = ["srun",
                     "--qos=short",
                     "--job-name=TSM-Sigma",
                     "--nodes=1",
                     "--cpus-per-task=3"]
submission_postfix = ["&"]
if args.submission_type == "dg-et-sigma":
    output_template = "--output=\"TSM-Sigma-DG-ET-{}-%j.out\""
    error_template  =  "--error=\"TSM-Sigma-DG-ET-{}-%j.err\""
    python_prefix = ["python",
                     "aws_tsm.py",
                     "--degrowth",
                     "--et",
                     "--record-paths",
                     "--eddies",
                     "--num", "200",
                     ]
    if args.force:
        python_prefix.append("--force")

    mult = 1e12
    for sigma_repr in range(1, 10):
        sigma = sigma_repr*mult
        submission_rest = [
                           "--set-parameter", "sigma", str(sigma),
                           "--set-parameter", "sigma_ET", str(sigma/math.sqrt(2)),
                           "--set-parameter", "S_mid",  str(sigma),
                           "dg-et-sigma-{}.out".format(sigma_repr),
                           ]
        if args.local:
            submission_list = python_prefix + submission_rest
        else:
            submission_list = submission_prefix + [output_template.format(sigma_repr), error_template.format(sigma_repr)] + python_prefix + submission_rest + submission_postfix

        print("submitting {!r}".format(" ".join(submission_list)))
        sp.call(submission_list)

if args.submission_type == "dg-sigma":
    output_template = "--output=\"TSM-Sigma-DG-{}-%j.out\""
    error_template  =  "--error=\"TSM-Sigma-DG-{}-%j.err\""
    python_prefix = ["python",
                     "aws_tsm.py",
                     "--degrowth",
                     "--record-paths",
                     "--eddies",
                     "--num", "200",
                     ]
    if args.force:
        python_prefix.append("--force")

    mult = 1e12
    for sigma_repr in range(1, 10):
	print(repr(sigma_repr))
        sigma = sigma_repr*mult
        submission_rest = [
                           "--set-parameter", "sigma", str(sigma),
                           "--set-parameter", "S_mid",  str(sigma),
                           "dg-sigma-{}.out".format(sigma_repr),
                           ]
        if args.local:
            submission_list = python_prefix + submission_rest
        else:
            submission_list = submission_prefix + [output_template.format(sigma_repr), error_template.format(sigma_repr)] + python_prefix + submission_rest + submission_postfix

        print("submitting {!r}".format(" ".join(submission_list)))
        sp.call(submission_list)
else:
    raise KeyError("got unknown submission-type {!r} ... that shouldn't happen".format(args.submission_type))





